{"version":3,"sources":["components/GameSettings.js","components/Square.js","components/Leaderbord.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["GameSettings","settings","onChange","mode","className","TextField","select","label","value","Object","keys","map","setting","i","MenuItem","key","Square","props","isBlue","isGreen","isRed","clickable","styles","backgroundColor","cursor","started","style","onClick","data-id","id","Leaderboard","winners","winner","date","Game","postData","a","Date","sendDate","toTimeString","slice","getDate","toLocaleDateString","month","getFullYear","winnersInfo","state","fetch","method","headers","body","JSON","stringify","then","res","json","data","setState","createSquare","size","squareInfo","available","player","squares","handleClick","e","square","target","dataset","handleChangeMode","gameMode","console","log","prev","field","delay","endGame","name","isStart","isEnd","alert","setInterval","blueSq","filter","sq","length","Math","round","clearInterval","availableSq","active","floor","random","startGame","reset","setName","axios","result","this","Button","variant","disabled","maxWidth","item","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d41c07f1.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\n\r\nexport const GameSettings = ({ settings = {}, onChange, mode }) => {\r\n  return (\r\n    <div className=\"game-mode\">\r\n      <TextField\r\n        select\r\n        label=\"Pick game mode\"\r\n        className=\"select\"\r\n        value={mode}\r\n        onChange={onChange}\r\n      >\r\n        {Object.keys(settings).map((setting, i) => (\r\n          <MenuItem key={i} value={setting}>\r\n            {setting}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Square = props => {\r\n  const { isBlue, isGreen, isRed, clickable, started } = props;\r\n  const styles = {\r\n    backgroundColor: isBlue\r\n      ? \"blue\"\r\n      : isGreen\r\n      ? \"green\"\r\n      : isRed\r\n      ? \"red\"\r\n      : \"white\",\r\n    cursor: started && clickable ? \"pointer\" : \"default\"\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"square\"\r\n      style={styles}\r\n      onClick={props.onClick}\r\n      data-id={props.id}\r\n    ></div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Leaderboard = ({ winners }) => {\r\n  return (\r\n    <div className=\"winners\">\r\n      <div className=\"winners-title\">Leader Board</div>\r\n      <div className=\"winners-content\">\r\n        {winners.map(winner => (\r\n          <div className=\"winners-item winner\" key={winner.id}>\r\n            <div className=\"winner-name\">{winner.winner}</div>\r\n            <div className=\"winner-date\">{winner.date}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { GameSettings } from \"./GameSettings\";\r\nimport { Square } from \"./Square\";\r\nimport { Leaderboard } from \"./Leaderbord\";\r\n\r\n//   const endGame = name => {\r\n//     setWinner(name);\r\n//     setIsEnd(true);\r\n//   };\r\n\r\n//   const delay = arr => {\r\n//     const delay = setInterval(() => {\r\n//       const squares = arr;\r\n//       const blueSq = squares.filter(sq => sq.isBlue);\r\n\r\n//       if (blueSq.length) {\r\n//         squares[blueSq[0].id].isBlue = false;\r\n//         squares[blueSq[0].id].isRed = true;\r\n//         squares[blueSq[0].id].clickable = false;\r\n//         console.log(squares);\r\n//       }\r\n\r\n//       if (\r\n//         squares.filter(sq => sq.isGreen).length === Math.round(size ** 2 / 2)\r\n//       ) {\r\n//         endGame(winner);\r\n//         clearInterval(delay);\r\n//       } else if (\r\n//         squares.filter(sq => sq.isRed).length === Math.round(size ** 2 / 2)\r\n//       ) {\r\n//         endGame(\"Computer\");\r\n//         clearInterval(delay);\r\n//       } else {\r\n//         const availableSq = squares.filter(sq => sq.available);\r\n\r\n//         if (availableSq.length) {\r\n//           const random = Math.floor(Math.random() * availableSq.length);\r\n//           const active = availableSq[random];\r\n//           squares[active.id].isBlue = true;\r\n//           squares[active.id].available = false;\r\n//         }\r\n//       }\r\n//     }, settings[mode].delay);\r\n//   };\r\n\r\n//   const handleStartGame = () => {\r\n//     const size = settings[mode].field;\r\n\r\n//     setSize(size);\r\n\r\n//     const squareArr = createSquare(size);\r\n\r\n//     if (isEnd) {\r\n//       setSquaresInfo(squareArr);\r\n//     }\r\n\r\n//     setIsStart(true);\r\n\r\n//     delay(squareArr);\r\n//   };\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      settings: null,\r\n      mode: \"\",\r\n      size: null,\r\n      delay: null,\r\n      winner: \"\",\r\n      isEnd: false,\r\n      isStart: false,\r\n      squares: null,\r\n      player: \"\",\r\n      winners: []\r\n    };\r\n  }\r\n  //Получаем данные с сервера до загрузки!\r\n  async componentDidMount() {\r\n    const result = await axios(\r\n      \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\"\r\n    );\r\n    const winners = await axios(\r\n      \"https://starnavi-frontend-test-task.herokuapp.com/winners\"\r\n    );\r\n    console.log(result.data);\r\n    this.setState({\r\n      settings: result.data,\r\n      size: result.data[Object.keys(result.data)[0]].field,\r\n      winners: winners.data\r\n    });\r\n  }\r\n\r\n  //Отправка данных на сервер\r\n\r\n  postData = async () => {\r\n    const date = new Date();\r\n    const sendDate = `${date\r\n      .toTimeString()\r\n      .slice(0, 5)}; ${date.getDate()} ${date.toLocaleDateString(\"en-US\", {\r\n      month: \"long\"\r\n    })} ${date.getFullYear()}`;\r\n\r\n    const winnersInfo = {\r\n      winner: this.state.winner,\r\n      date: sendDate\r\n    };\r\n\r\n    return await fetch(\r\n      `https://starnavi-frontend-test-task.herokuapp.com/winners`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(winnersInfo)\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ winners: data });\r\n      });\r\n  };\r\n\r\n  //Создание поля игры\r\n\r\n  createSquare = size => {\r\n    let squareInfo = [];\r\n\r\n    for (let i = 0; i < size ** 2; i++) {\r\n      squareInfo[i] = {\r\n        id: i,\r\n        isBlue: null,\r\n        isGreen: null,\r\n        isRed: null,\r\n        clickable: true,\r\n        available: true,\r\n        player: \"\"\r\n      };\r\n    }\r\n\r\n    this.setState({\r\n      squares: squareInfo\r\n    });\r\n\r\n    return squareInfo;\r\n  };\r\n\r\n  //Обработка событий нажатия на \"точку\"\r\n  handleClick = e => {\r\n    const { squares } = this.state;\r\n    const square = squares[e.target.dataset.id];\r\n    if (square.isBlue) {\r\n      squares[square.id].isBlue = false;\r\n      squares[square.id].isGreen = true;\r\n      squares[square.id].clickable = false;\r\n\r\n      this.setState({\r\n        squares\r\n      });\r\n    }\r\n  };\r\n\r\n  //Выбор режима игры\r\n\r\n  handleChangeMode = e => {\r\n    const gameMode = e.target.value;\r\n    console.log(\"gameMode: \", gameMode);\r\n\r\n    this.setState(prev => {\r\n      console.log(prev.settings[gameMode].field);\r\n      return {\r\n        mode: gameMode,\r\n        size: prev.settings[gameMode].field,\r\n        delay: prev.settings[gameMode].delay\r\n      };\r\n    });\r\n\r\n    console.log(this.state.settings[gameMode].field);\r\n\r\n    this.createSquare(this.state.settings[gameMode].field);\r\n  };\r\n\r\n  //Обработка окончания игры.\r\n\r\n  endGame = name => {\r\n    this.setState({\r\n      isStart: false,\r\n      isEnd: true,\r\n      winner: name\r\n    });\r\n    alert(`${name} won`);\r\n    this.postData();\r\n  };\r\n\r\n  //Метод рендеринга цветных квадратов\r\n\r\n  delay = () => {\r\n    const delay = setInterval(() => {\r\n      const { squares, size, player } = this.state;\r\n\r\n      const blueSq = squares.filter(sq => sq.isBlue);\r\n      if (blueSq.length) {\r\n        squares[blueSq[0].id].isBlue = false;\r\n        squares[blueSq[0].id].isRed = true;\r\n        squares[blueSq[0].id].clickable = false;\r\n        console.log(squares);\r\n      }\r\n\r\n      if (\r\n        squares.filter(sq => sq.isGreen).length === Math.round(size ** 2 / 2)\r\n      ) {\r\n        this.endGame(player);\r\n        clearInterval(delay);\r\n      } else if (\r\n        squares.filter(sq => sq.isRed).length === Math.round(size ** 2 / 2)\r\n      ) {\r\n        this.endGame(\"Computer\");\r\n        clearInterval(delay);\r\n      } else {\r\n        const availableSq = squares.filter(sq => sq.available);\r\n\r\n        if (availableSq.length) {\r\n          const random = Math.floor(Math.random() * availableSq.length);\r\n          const active = availableSq[random];\r\n          squares[active.id].isBlue = true;\r\n          squares[active.id].available = false;\r\n\r\n          this.setState({\r\n            squares\r\n          });\r\n        }\r\n      }\r\n    }, this.state.delay);\r\n  };\r\n\r\n  //Обработка начала игры\r\n\r\n  startGame = () => {\r\n    const { size, isEnd } = this.state;\r\n\r\n    if (isEnd) {\r\n      const reset = this.createSquare(size);\r\n\r\n      this.setState({\r\n        squares: reset,\r\n        isEnd: false\r\n      });\r\n    }\r\n\r\n    this.setState({ isStart: true });\r\n\r\n    this.delay();\r\n  };\r\n\r\n  //Обработка ввода имени\r\n\r\n  setName = e => {\r\n    this.setState({ player: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      settings,\r\n      mode,\r\n      size,\r\n      player,\r\n      isEnd,\r\n      isStart,\r\n      squares,\r\n      winners\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"wrap\">\r\n          {settings && (\r\n            <div className=\"game-settings\">\r\n              <GameSettings\r\n                settings={settings}\r\n                onChange={this.handleChangeMode}\r\n                mode={mode}\r\n              />\r\n              <TextField\r\n                label=\"You'r name?\"\r\n                className=\"input\"\r\n                onChange={this.setName}\r\n                value={player}\r\n              />\r\n              <Button\r\n                onClick={this.startGame}\r\n                variant=\"contained\"\r\n                className=\"play-button\"\r\n                disabled={!mode || isStart || !player}\r\n              >\r\n                {isEnd ? \"Play again!\" : \"Play\"}\r\n              </Button>\r\n            </div>\r\n          )}\r\n\r\n          {squares && (\r\n            <div className=\"game-field\" style={{ maxWidth: `${45 * size}px` }}>\r\n              {squares.map(item => {\r\n                return (\r\n                  <Square\r\n                    key={item.id}\r\n                    {...item}\r\n                    onClick={this.handleClick}\r\n                    started={isStart}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Leaderboard winners={winners} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello in Dot's Game</h1>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}